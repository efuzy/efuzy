#!/usr/bin/env node

require('../lib/node-version-check')

const updateNotifier = require('update-notifier')
const pkg = require('../package.json')

updateNotifier({ pkg }).notify()

function getEfuzyAppExecutable (which, root) {
  try {
    return require.resolve(which, {
      paths: [ root ]
    })
  }
  catch (e) {
    return false
  }
}

let cmd = process.argv[2]

if (cmd === 'create') {
  process.argv.splice(2, 1)
  require(`./efuzy-create`)
}
else if (cmd === 'serve') {
  process.argv.splice(2, 1)
  require(`./efuzy-serve`)
}
else if (cmd === 'upgrade') {
  process.argv.splice(2, 1)
  require(`./efuzy-upgrade`)
}
else {
  const root = require('../lib/get-project-root')()

  const localFile = root
    ? (
      getEfuzyAppExecutable('@efuzy/app/bin/efuzy', root) ||
      getEfuzyAppExecutable('efuzy-cli/bin/efuzy', root) // legacy <1.0
    )
    : void 0

  if (localFile) {
    process.env.EFUZY_CLI_VERSION = require('../package.json').version

    global.efuzyCli = {
      help: `
    upgrade       Check (and optionally) upgrade Efuzy packages
                    from a Efuzy project folder
    serve         Create an ad-hoc server on App's distributables
`
    }

    require(localFile)
  }
  else {
    const commands = [
      'info',
      'help'
    ]

    if (cmd) {
      if (cmd === '-h') {
        cmd = 'help'
      }
      else if (cmd === 'i') {
        cmd = 'info'
      }

      if (commands.includes(cmd)) {
        process.argv.splice(2, 1)
      }
      else {
        if (cmd === '-v' || cmd === '--version') {
          console.log(require('../package.json').version)
          process.exit(0)
        }

        const chalk = require('chalk')

        console.log(`\n ${chalk.red(`Error`)} Unknown command "${ cmd }"`)

        if (cmd.indexOf('-') === 0) {
          console.log(`\n ${chalk.red(`Error`)} Command must come before the options`)
        }

        console.log()
        cmd = 'help'
      }
    }
    else {
      cmd = 'help'
    }

    require(`./efuzy-${cmd}`)
  }
}
